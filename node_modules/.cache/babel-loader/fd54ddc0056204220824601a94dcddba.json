{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emji\\\\Desktop\\\\New folder (3)\\\\nd0191-c1-myreads-main\\\\nd0191-c1-myreads-main\\\\starter\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { getAll, update } from \"./BooksAPI\";\nimport Home from \"./components/Home\";\nimport Search from \"./components/search\";\nimport HookQuery from \"./components/HookQuery\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /* TODO: importing all functions from the BooksAPI as BooksAPI\n            storing the data from Api in variable name booksData in array\n  */\n  const [booksData, setBooksData] = useState([]); // TODO: variable to handle Search state\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchBookQuery, setSearchBookQuery] = HookQuery(searchQuery);\n  const [mergedBooks, setMergedBooks] = useState([]);\n  const [mapOfIdBooks, setMapOfIdBooks] = useState(new Map());\n\n  const getAllBooksData = async () => {\n    await getAll().then(res => {\n      setBooksData(res);\n      setMapOfIdBooks(createMapOfBooks(res));\n    });\n  };\n\n  const handleUpdateShelf = async (book, shelf) => {\n    await update(book, shelf);\n    getAllBooksData();\n  };\n\n  const handleSearchQuery = e => {\n    let inputValue = e.target.value;\n    setSearchQuery(inputValue);\n  };\n\n  useEffect(() => {\n    const combiningBooksShelf = searchBookQuery.map(book => {\n      if (mapOfIdBooks.has(book.id)) {\n        return mapOfIdBooks.get(book.id);\n      } else {\n        return book;\n      }\n    });\n    setMergedBooks(combiningBooksShelf);\n  }, [searchBookQuery]);\n\n  const createMapOfBooks = books => {\n    const map = new Map();\n    books.map(book => map.set(book.id, book));\n    return map;\n  };\n\n  useEffect(() => {\n    getAllBooksData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/search\",\n        element: /*#__PURE__*/_jsxDEV(Search, {\n          mergedBooks: mergedBooks,\n          searchQuery: searchQuery,\n          handleSearchQuery: handleSearchQuery,\n          handleUpdateShelf: handleUpdateShelf\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {\n          booksData: booksData,\n          handleUpdateShelf: handleUpdateShelf\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"YFkXkS7s/pS2N5ijDDx6OaonC1Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/emji/Desktop/New folder (3)/nd0191-c1-myreads-main/nd0191-c1-myreads-main/starter/src/App.js"],"names":["useEffect","useState","Routes","Route","getAll","update","Home","Search","HookQuery","App","booksData","setBooksData","searchQuery","setSearchQuery","searchBookQuery","setSearchBookQuery","mergedBooks","setMergedBooks","mapOfIdBooks","setMapOfIdBooks","Map","getAllBooksData","then","res","createMapOfBooks","handleUpdateShelf","book","shelf","handleSearchQuery","e","inputValue","target","value","combiningBooksShelf","map","has","id","get","books","set"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { getAll, update } from \"./BooksAPI\";\nimport Home from \"./components/Home\";\nimport Search from \"./components/search\";\n\nimport HookQuery from \"./components/HookQuery\";\n\nfunction App() {\n  /* TODO: importing all functions from the BooksAPI as BooksAPI\n            storing the data from Api in variable name booksData in array\n  */\n  const [booksData, setBooksData] = useState([]);\n  // TODO: variable to handle Search state\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchBookQuery, setSearchBookQuery] = HookQuery(searchQuery);\n\n  const [mergedBooks, setMergedBooks] = useState([]);\n  const [mapOfIdBooks, setMapOfIdBooks] = useState(new Map());\n\n  const getAllBooksData = async () => {\n    await getAll().then((res) => {\n      setBooksData(res);\n      setMapOfIdBooks(createMapOfBooks(res));\n    });\n  };\n\n  const handleUpdateShelf = async (book, shelf) => {\n    await update(book, shelf);\n    getAllBooksData();\n  };\n\n  const handleSearchQuery = (e) => {\n    let inputValue = e.target.value;\n    setSearchQuery(inputValue);\n  };\n\n\n  useEffect(() => {\n    const combiningBooksShelf = searchBookQuery.map((book) => {\n      if (mapOfIdBooks.has(book.id)) {\n        return mapOfIdBooks.get(book.id);\n      } else {\n        return book;\n      }\n    });\n    setMergedBooks(combiningBooksShelf);\n  }, [searchBookQuery]);\n\n  const createMapOfBooks = (books) => {\n    const map = new Map();\n    books.map((book) => map.set(book.id, book));\n    return map;\n  };\n\n \n  useEffect(() => {\n    getAllBooksData();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Routes>\n        <Route\n          path=\"/search\"\n          element={\n            <Search\n              mergedBooks={mergedBooks}\n              searchQuery={searchQuery}\n              handleSearchQuery={handleSearchQuery}\n              handleUpdateShelf={handleUpdateShelf}\n            />\n          }\n        />\n        <Route\n          path=\"/\"\n          element={\n            <Home booksData={booksData} handleUpdateShelf={handleUpdateShelf} />\n          }\n        />\n      <Route path=\"*\" element={<Error />} />\n        \n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}